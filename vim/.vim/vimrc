" URL: http://vim.wikia.com/wiki/Example_vimrc
" Authors: Juan José Gamboa
" Description: A feature rich .vimrc with all the tools needed for developing
"              in C++ and Python. Based in the example .vimrc posted in the
"              URL above

"------------------------------------------------------------
" Features {{{1
"
" These options and commands enable some very useful features in Vim, that
" no user should have to live without.

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on

" Enable syntax highlighting
syntax on

" Enable folding
set foldmethod=syntax
set foldlevelstart=3  " A higher value implies more open folds

" Highlight the current line
set cursorline

" Avoids line wrapping
set nowrap

" Change remove command in netrw to allow removing non-empty directories using 'D'
let g:netrw_localrmdir='rm -r'

"------------------------------------------------------------
" Plugins {{{1
"
" The plugin manager of choice in this case is vim-plug. The following
" commands will install the plugin manager automatically if not already
" installed.
"
" It will also install the plugins included under the 'plug#begin' section
" once Vim starts
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/tpope/vim-sensible

" tpope's classics
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'

" Netrw buff by tpope
Plug 'tpope/vim-vinegar'

" Buffing visual mode search using '*'
Plug 'bronson/vim-visual-star-search'

" Process control (works w/ ChucK extension)
Plug 'Shougo/vimproc.vim', {'do' : 'make'}

" Version control
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'junegunn/gv.vim'
Plug 'stsewd/fzf-checkout.vim'

" Fuzzy finders
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'ctrlpvim/ctrlp.vim'

" Sessions and projects
Plug 'tpope/vim-obsession'
Plug 'dhruvasagar/vim-prosession'

" Themes
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'arcticicestudio/nord-vim', { 'as': 'nord' }
Plug 'lifepillar/vim-gruvbox8', { 'as': 'gruvbox' }

" Powerline/airline plugins
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'powerline/powerline'

" Snippets support
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Language support/tools and better syntax highlighting
Plug 'sheerun/vim-polyglot'
Plug 'wilsaj/chuck.vim'
Plug 'tmhedberg/SimpylFold'
Plug 'Konfekt/FastFold'
Plug 'neovimhaskell/haskell-vim'

" Development plugins
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dense-analysis/ale'

" LaTeX support
Plug 'lervag/vimtex'

" Markdown support
Plug 'godlygeek/tabular', {'for': 'markdown'}
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

" Initialize plugin system
call plug#end()

" Some plugins have specific settings that go here

""""""""""""""""""""
" Vinegar settings "
""""""""""""""""""""

" To close netrw after opening a file (this solves a very annoying bug)
autocmd FileType netrw setl bufhidden=wipe
let g:netrw_fastbrowse = 0

""""""""""""""""
" CoC settings "
""""""""""""""""

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Add paths to CoC python extersions
let python_path = $PYTHONPATH
call coc#config("jedi.workspace.extraPaths", [python_path])
call coc#config("python.analysis.extraPaths", [python_path])

" Let the diagnostics to ALE (asynchronous)
call coc#config("diagnostic.displayByAle", 'true')

""""""""""""""""
" ALE settings "
""""""""""""""""
" declare which linters you want to run
let g:ale_linters={
\   'python': ['flake8', 'pydocstyle', 'bandit', 'pylint'],
\   'cpp': ['ccls'],
\   'haskell': ['hlint'],
\}

" you can also disable explicitly some linters
let g:ale_linters_ignore = {
\   'cpp': ['clazy'],
\}

" Configure fixers
let g:ale_fixers={
\   '*': [],
\   'python': ['black', 'isort', 'autopep8'],
\}

" To not intellisense (let it to CoC)
let g:ale_disable_lsp=1
let g:ale_echo_cursor = 1
let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_format = '[%linter%] %s'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_enabled = 1
let g:ale_keep_list_window_open = 0
let g:ale_lint_delay = 0
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 0
let g:ale_lint_on_text_changed = 'always'
let g:ale_fix_on_save = 1

" Set this. Airline will handle the rest.
let g:airline#extensions#ale#enabled=1

"""""""""""""""""""""
" Snippets settings "
"""""""""""""""""""""
let g:UltiSnipsExpandTrigger="<f5>"
let g:UltiSnipsJumpForwardTrigger="<f6>"
let g:UltiSnipsJumpBackwardTrigger="<f4>"

""""""""""""""""""
" CtrlP settings "
""""""""""""""""""
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(cache|ros|git)$',
  \ }

""""""""""""""""
" FZF settings "
""""""""""""""""
let $FZF_DEFAULT_COMMAND='ag --hidden --ignore={.git,.ros,.cache,.stack,.thunderbird} -g ""'

function! s:list_buffers()
  redir => list
  silent ls
  redir END
  return split(list, "\n")
endfunction

function! s:delete_buffers(lines)
  execute 'bwipeout' join(map(a:lines, {_, line -> split(line)[0]}))
endfunction

command! BD call fzf#run(fzf#wrap({
  \ 'source': s:list_buffers(),
  \ 'sink*': { lines -> s:delete_buffers(lines) },
  \ 'options': '--multi --reverse --bind ctrl-a:select-all+accept'
\ }))

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" configure the colors and set the theme here (gruvbox has to be named gruvbox8) "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set termguicolors (compatibility with tmux)
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

set encoding=utf-8
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8

" vim hardcodes background color erase even if the terminfo file does
" not contain bce (not to mention that libvte based terminals
" incorrectly contain bce in their terminfo files). This causes
" incorrect background rendering when using a color theme with a
" background color.
let &t_ut=''
set t_ut=

colorscheme gruvbox8_hard
set background=dark

""""""""""""
" air-line "
""""""""""""
let g:airline_theme='base16_gruvbox_dark_medium'
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
    endif

" " unicode symbols
" let g:airline_left_sep = '»'
" let g:airline_left_sep = '▶'
" let g:airline_right_sep = '«'
" let g:airline_right_sep = '◀'
" let g:airline_symbols.linenr = '␊'
" let g:airline_symbols.linenr = '␤'
" let g:airline_symbols.linenr = '¶'
" let g:airline_symbols.branch = '⎇'
" let g:airline_symbols.paste = 'ρ'
" let g:airline_symbols.paste = 'Þ'
" let g:airline_symbols.paste = '∥'
" let g:airline_symbols.whitespace = 'Ξ'

" " airline symbols
" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''
" let g:airline_symbols.branch = ''
" let g:airline_symbols.readonly = ''
" let g:airline_symbols.linenr = ''

" Removes the mode at the bottom, showing only the powerline
set noshowmode

"------------------------------------------------------------
" Must have options {{{1
"
" These are highly recommended options.
"
" Vim with default settings does not allow easy switching between multiple files
" in the same editor window. Users can use multiple split windows or multiple
" tab pages to edit multiple files, but it is still best to enable an option to
" allow easier switching between files.
"
" One such option is the 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.
set hidden

" Note that not everyone likes working this way (with the hidden option).
" Alternatives include using tabs or split windows instead of re-using the same
" window as mentioned above, and/or either of the following options:
" set confirm
" set autowriteall

" Better command-line completion
set wildmenu
set wildmode=full

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <Leader>l to temporarily turn off highlighting; see the
" mapping of <Leader>l below)
set hlsearch

" Modelines have historically been a source of security vulnerabilities. As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
" set nomodeline


"------------------------------------------------------------
" Usability options {{{1
"
" These are options that users frequently set in their .vimrc. Some of them
" change Vim's behaviour in ways which deviate from the true Vi way, but
" which are considered to add usability. Which, if any, of these options to
" use is very much a personal preference, but they are harmless.

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number relativenumber

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>


"------------------------------------------------------------
" Indentation options {{{1
"
" Indentation settings according to personal preference.

" Indentation settings for using 4 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=4
set softtabstop=4
set expandtab

" Indentation settings for using hard tabs for indent. Display tabs as
" four characters wide.
"set shiftwidth=4
"set tabstop=4

"------------------------------------------------------------
" Mappings {{{1
"
" Useful mappings

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" This is useful to close the the whole layout instead of the windows
" one by one ('ZZ' behavior)
nnoremap ZA :wqa<CR>

" To escape insert mode quickly without leaving the home row
inoremap jk <Esc>

" Leader key remappings
let mapleader=" "

" This will save the file as sudo, avoiding editing it with sudo, thus
" loading the vimrc present in 'root'
noremap <Leader>W :w !sudo tee "%" > /dev/null

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <Leader>l :nohl<CR><C-L>

" This mapping will make you fly through your buffers!!
" nnoremap <Leader>b :ls<CR>:b<Space>

"Remove all trailing whitespace by pressing F5
nnoremap <Leader><Space> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

"""""""""""""""
" Vim windows "
"""""""""""""""
" Remaps to control the window navigation more quickly
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-L> <C-W>l
noremap <C-H> <C-W>h

" More natural movement of the hand
nnoremap <Leader>w <C-W>

" This remaps move and increase the size of the window selected
noremap <C-Left> <C-W>h<C-W><bar>
noremap <C-Down> <C-W>j<C-W>_
noremap <C-Up> <C-W>k<C-W>_
noremap <C-Right> <C-W>l<C-W><bar>

"""""""""""""""""""""""""""""
" Session management remaps "
"""""""""""""""""""""""""""""
let g:obsession_dir = '~/.vim/sessions/'
let g:prosession_dir = '~/.vim/sessions/'
" session save remap
exec 'nnoremap <Leader>ss :Obsession ' . g:obsession_dir . '*.vim<C-D><BS><BS><BS><BS><BS>'
" session restore remap
exec 'nnoremap <Leader>sr :so ' . g:obsession_dir . '*.vim<C-D><BS><BS><BS><BS><BS>'
" for pausing and unpausing our current session if we’re in one
nnoremap <Leader>sp :Obsession<CR>

""""""""""""""
" FZF remaps "
""""""""""""""
" nnoremap <Leader>s :<C-u>FZF<CR>
" Search and switch buffers
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>db :BD<CR>
" Find files by name under the current directory
nnoremap <silent> <Leader>e :Files<CR>
" Find files by name under the home directory
nnoremap <silent> <Leader>h :Files ~/<CR>
" Search content in the current file
nnoremap <silent> <Leader>/ :BLines<CR>
" Search content in the current file and in files under the current directory
nnoremap <silent> <Leader>ag :Ag<CR>

""""""""""""""
" Git remaps "
""""""""""""""
" Basic Git tools
nnoremap <Leader>gb :GBranches<CR>
nnoremap <Leader>gt :GTags<CR>
nnoremap <Leader>gs :vertical G<CR>
nnoremap <Leader>gp :G push<CR>
nnoremap <Leader>gc :Git commit<CR>
" Git graph
nnoremap <Leader>gg :GV<CR>
" Diff management
nnoremap <Leader>gd :Gvdiffsplit!<CR>
nnoremap <Leader>dh :diffget //2<CR>
nnoremap <Leader>dl :diffget //3<CR>
vnoremap <Leader>dp :diffput<CR>
vnoremap <Leader>dg :diffget<CR>
nnoremap <Leader>dp :diffput<CR>
nnoremap <Leader>dg :diffget<CR>

""""""""""""""
" ALE remaps "
""""""""""""""
nmap <silent> <leader>aj :ALENext<cr>
nmap <silent> <leader>ak :ALEPrevious<cr>

""""""""""""""
" CoC remaps "
""""""""""""""
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
else
    inoremap <silent><expr> <c-a> coc#refresh()
endif
" Use <CR> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <Leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <Leader>f  <Plug>(coc-format-selected)
nmap <Leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<Leader>aap` for current paragraph
xmap <Leader>a  <Plug>(coc-codeaction-selected)
nmap <Leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <Leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <Leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <Leader>ca  :<C-u>CocList diagnostics<CR>
" Manage extensions
nnoremap <silent> <Leader>ce  :<C-u>CocList extensions<CR>
" Show commands
nnoremap <silent> <Leader>cc  :<C-u>CocList commands<CR>
" Find symbol of current document
nnoremap <silent> <Leader>co  :<C-u>CocList outline<CR>
" Search workspace symbols
nnoremap <silent> <Leader>cs  :<C-u>CocList -I symbols<CR>
" Do default action for next item.
nnoremap <silent> <Leader>cj  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <Leader>ck  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <Leader>cp  :<C-u>CocListResume<CR>
"------------------------------------------------------------
